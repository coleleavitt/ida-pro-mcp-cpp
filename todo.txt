
  Major Missing Features

  1. Decompilation Support ‚ö†Ô∏è (CRITICAL)

  You're correct - decompilation is completely missing. The Hex-Rays decompiler API (hexrays.hpp) provides:
  - decompile_func(func_t *pfn) - Decompile a function and get C-like pseudocode
  - decompile_snippet() - Decompile arbitrary code ranges
  - gen_microcode() - Generate microcode representation
  - Ctree access - AST-like tree with C statements and expressions (cinsn_t, cexpr_t, cfunc_t)
  - Microcode analysis - Low-level IR with data flow analysis (mba_t, mblock_t, minsn_t)

  2. Control Flow Graph Analysis

  From gdl.hpp:
  - qflow_chart_t - Flow chart/CFG generation for functions
  - Basic block analysis - Get basic blocks with predecessors/successors
  - Graph operations - Dominator analysis, path checking

  3. Type System

  From typeinf.hpp and srclang.hpp:
  - Type parsing - Parse C/C++/Objective-C type declarations
  - Type manipulation - Get/set types for variables and functions (tinfo_t)
  - Struct/Union access - Navigate complex types (udt_type_data_t, enum_type_data_t)
  - Function signatures - Get/set function prototypes (func_type_data_t)

  4. Objective-C Support

  From srclang.hpp:
  - SRCLANG_OBJC constant - Objective-C language parsing support
  - parse_decls_for_srclang(SRCLANG_OBJC, ...) - Parse Objective-C type declarations
  - select_parser_by_srclang(SRCLANG_OBJC) - Use Objective-C parser

  5. Other Useful Analysis Tools

  - Stack frame analysis (frame.hpp) - Local variables, stack layout
  - Enums (typeinf.hpp, bytes.hpp) - Enum definitions and members
  - Imports/Exports (nalt.hpp) - Import/export table access
  - Demangle (demangle.hpp) - Name demangling beyond basic get_name()
  - Patterns/Signatures (search.hpp) - Binary pattern search
  - Debugger integration (dbg.hpp) - If you want runtime analysis
  - Graph generation (gdl.hpp) - Export call graphs, xref graphs

  Recommended Priority Order

  1. Decompilation (Highest Priority)
    - decompile_function - Get pseudocode for a function
    - generate_microcode - Get microcode representation
    - get_ctree - Get AST structure
  2. Type System
    - get_type - Get type at address
    - set_type - Apply type to address
    - parse_types - Parse C/Objective-C declarations
  3. Control Flow
    - get_flowchart - Get CFG/basic blocks for function
    - get_basic_block_at - Get basic block at address
  4. Advanced Features
    - get_stack_frame - Get stack variables
    - search_pattern - Binary pattern search
    - Objective-C parsing (if working with iOS/macOS binaries)

  Example Tool Additions

  // Decompilation
  "decompile_function" - Returns pseudocode as text
  "generate_microcode" - Returns microcode representation
  "get_ctree_json" - Returns AST as structured JSON

  // Type system
  "get_type_at" - Get type information
  "set_type_at" - Apply type to address
  "parse_decls" - Parse type declarations

  // CFG
  "get_basic_blocks" - Get all basic blocks in function
  "get_flowchart" - Get CFG with edges

  The decompilation API is definitely the biggest gap - it's one of IDA Pro's most powerful features and essential for
   modern reverse engineering workflows.





‚óè Here's the complete list of missing tools from your MCP implementation:

  üî¥ CRITICAL MISSING: Decompilation Tools (hexrays.hpp)

  Core Decompilation

  1. decompile_function - Decompile function to pseudocode (returns cfunc_t with C code)
  2. decompile_snippet - Decompile arbitrary code range
  3. generate_microcode - Generate microcode IR for function/snippet
  4. get_pseudocode_text - Get decompiled C code as formatted text
  5. get_ctree - Get AST (C-tree) structure
  6. get_lvars - Get local variables from decompiled function
  7. print_ctree - Print C-tree in various formats

  Microcode Analysis

  8. get_microcode_text - Get microcode as text representation
  9. get_mblock_at - Get microcode basic block at address
  10. get_microcode_maturity - Get microcode at specific optimization level
  11. analyze_dataflow - Perform data flow analysis on microcode

  üü† HIGH PRIORITY: Type System Tools (typeinf.hpp, srclang.hpp)

  Type Information

  12. get_type - Get type information at address
  13. set_type - Apply type to address
  14. get_tinfo - Get tinfo_t object for address
  15. apply_tinfo - Apply tinfo_t to address
  16. parse_decl - Parse C/C++/ObjC type declaration string
  17. parse_decls - Parse multiple type declarations
  18. print_type - Format type as string
  19. get_type_size - Get size of type

  Structure/Union/Enum Access

  20. get_struct_by_name - Get structure definition
  21. get_struct_members - List structure members
  22. get_struct_member - Get member info by offset
  23. get_union_members - List union members
  24. get_enum_members - List enum members
  25. get_enum_by_name - Get enum definition
  26. create_struct_type - Create new struct type
  27. add_struct_member - Add member to struct

  Function Type Information

  28. get_func_type - Get function signature/prototype
  29. set_func_type - Set function signature
  30. get_func_args - Get function argument types
  31. get_return_type - Get function return type

  Named Types

  32. get_named_type - Get type from type library by name
  33. get_numbered_type - Get type by ordinal
  34. set_named_type - Add/update type in type library

  Objective-C Type Parsing

  35. parse_objc_decls - Parse Objective-C declarations
  36. select_objc_parser - Use Objective-C parser

  üü° MEDIUM PRIORITY: Control Flow & Analysis (gdl.hpp, funcs.hpp)

  Control Flow Graph

  37. get_flowchart - Get function CFG with basic blocks
  38. get_basic_blocks - List all basic blocks in function
  39. get_basic_block_at - Get basic block containing address
  40. get_block_succs - Get successors of basic block
  41. get_block_preds - Get predecessors of basic block
  42. get_block_type - Get block type (normal/ret/noret/etc)

  Call Graph

  43. generate_call_graph - Generate function call graph
  44. get_caller_graph - Get callers recursively
  45. get_callee_graph - Get callees recursively

  üü¢ USEFUL: Specialized Analysis Tools

  Stack Frame Analysis (frame.hpp)

  46. get_frame - Get stack frame structure
  47. get_frame_size - Get total frame size
  48. get_stack_vars - Get stack variables
  49. get_stack_var_at - Get stack variable at offset
  50. get_frame_args - Get function arguments from frame
  51. get_frame_locals - Get local variables from frame

  Import/Export Tables (nalt.hpp)

  52. get_import_modules - List import modules
  53. get_imports - Get all imports from module
  54. enum_imports - Enumerate imports with callback
  55. get_export_count - Get number of exports
  56. get_exports - Get all exports

  Entry Points (entry.hpp)

  57. get_entry_points - Get all entry points
  58. get_entry_point - Get entry point by ordinal
  59. get_entry_name - Get entry point name

  Pattern Search (search.hpp)

  60. search_binary - Binary pattern search
  61. find_pattern - Search for byte pattern
  62. search_text - Text string search

  Fixups/Relocations (fixup.hpp)

  63. get_fixup - Get fixup at address
  64. get_all_fixups - Enumerate all fixups
  65. contains_fixups - Check if range has fixups

  Jump Tables (jumptable.hpp)

  66. get_jump_table - Get jump table info
  67. get_switch_info - Get switch statement info

  Advanced Demangling (demangle.hpp)

  68. demangle_name - Full demangling with options
  69. demangle_type - Demangle type string

  Operand Analysis (ua.hpp)

  70. get_operand_type - Get operand type details
  71. get_operand_value - Get operand value
  72. get_canon_feature - Get instruction features

  Data Analysis (bytes.hpp)

  73. get_data_type - Get data type at address
  74. get_array_info - Get array information
  75. get_struc_id - Get structure ID at address
  76. is_code - Check if address is code
  77. is_data - Check if address is data
  78. is_unknown - Check if address is unexplored

  Auto-analysis (auto.hpp)

  79. plan_range - Mark range for auto-analysis
  80. auto_mark_range - Auto-analyze range
  81. get_auto_state - Get auto-analysis state

  Database Metadata (nalt.hpp continued)

  82. get_imagebase - Get image base address
  83. get_root_filename - Get original filename
  84. get_input_file_path - Get input file path

  Summary by Category

  TOTAL MISSING: 84+ tools

  - Decompilation: 11 tools ‚ö†Ô∏è ZERO currently implemented
  - Type System: 25 tools
  - CFG/Flow Analysis: 6 tools
  - Specialized Analysis: 42+ tools

  The most critical gap is the complete absence of decompilation functionality, which is one of IDA Pro's flagship
  features. The type system is also completely missing despite being essential for reverse engineering.